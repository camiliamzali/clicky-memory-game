{"version":3,"sources":["components/Header.js","components/Score.js","components/characterCard/Character.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Score","props","score","highScore","Character","onClick","handleClick","id","style","height","width","objectFit","alt","name","src","image","App","state","characterList","character","characterID","characterListCopy","Object","toConsumableArray","_this","console","log","isCorrect","forEach","isClicked","setState","sort","Math","random","_this2","this","components_Header","components_Score","map","_ref","characterCard_Character","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0mDAUeA,MARf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAlB,iBCWSC,MAbf,SAAeC,GACb,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6DACbH,EAAAC,EAAAC,cAAA,2BACEF,EAAAC,EAAAC,cAAA,gBAAQG,EAAMC,QAEhBN,EAAAC,EAAAC,cAAA,wBACEF,EAAAC,EAAAC,cAAA,gBAAQG,EAAME,oBCMPC,MAbf,SAAmBH,GACjB,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBM,QAAS,kBAAMJ,EAAMK,YAAYL,EAAMM,KAAKC,MAAO,CACvFC,OAAQ,MACRC,MAAO,QAEPd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBS,MAAO,CAAEG,UAAW,UACjDf,EAAAC,EAAAC,cAAA,OAAKc,IAAKX,EAAMY,KAAMC,IAAKb,EAAMc,kBCmF1BC,6MArFbC,MAAQ,CACNf,MAAO,EACPgB,cAAeC,EACfhB,UAAW,KAIbG,YAAc,SAACc,GAGb,IAAMC,EAAiBC,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAMC,eACzCO,QAAQC,IAAIL,GAEZ,IAAIM,GAAY,EAahB,GAVAN,EAAkBO,QAAQ,SAAAT,GACpBA,EAAUZ,KAAOa,IACdD,EAAUU,YACbF,GAAY,EACZR,EAAUU,WAAY,MAMxBF,EAAW,CAGb,IAAMzB,EAAQsB,EAAKP,MAAMf,MAAQ,EAEjCsB,EAAKM,SAAS,CACZ5B,MAAOA,EACPC,UAAYD,GAASsB,EAAKP,MAAMd,UAAcD,EAAUsB,EAAKP,MAAMd,UACnEe,cAAeG,EAAkBU,KAAK,iBAAM,GAAKC,KAAKC,kBAGxB,IAAzBT,EAAKP,MAAMd,UAClBqB,EAAKM,SAAS,CACZ5B,MAAO,EACPgB,cAAeG,EAAkBU,KAAK,iBAAM,GAAMC,KAAKC,cAKzDZ,EAAkBO,QAAQ,SAAAT,GACxBA,EAAUU,WAAY,IAExBL,EAAKM,SAAS,CACZ5B,MAAO,EACPgB,cAAeG,EAAkBU,KAAK,iBAAM,GAAMC,KAAKC,cAG3DR,QAAQC,IAAIF,EAAKP,MAAMf,MAAOsB,EAAKP,MAAMd,oFAMlC,IAAA+B,EAAAC,KACCjB,EAAkBiB,KAAKlB,MAAvBC,cACR,OACEtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAEsC,EAAF,MACAxC,EAAAC,EAAAC,cAAEuC,EAAF,CAAQnC,MAAOiC,KAAKlB,MAAMf,MAAOC,UAAWgC,KAAKlB,MAAMd,YACvDP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAEXmB,EAAcoB,IAAI,SAAAC,GAAmB,IAAhBhC,EAAgBgC,EAAhBhC,GAAIQ,EAAYwB,EAAZxB,MACvB,OAEEnB,EAAAC,EAAAC,cAAE0C,EAAF,CACEjC,GAAIA,EACJkC,IAAKlC,EACLQ,MAAOA,EACPT,YAAa4B,EAAK5B,yBA3ElBoC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e0408bdb.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n    <div className=\"jumbotron-fluid bg-dark text-light text-center\">\n      <header className=\"display-4\">Memory Game</header>\n    </div>\n  )\n}\n\nexport default Header;","import React from 'react';\n\n\nfunction Score(props) {\n  return (\n    <div className=\"bg-dark text-light text-center row justify-content-around\">\n      <h2>Current Score:\n        <span> {props.score}</span>\n      </h2>\n      <h2>High Score:\n        <span> {props.highScore}</span>\n      </h2>\n    </div>\n  )\n}\n\nexport default Score;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Character(props) {\n  return (\n    <div className=\"card col-12 col-md-3\" onClick={() => props.handleClick(props.id)} style={{\n      height: \"50%\",\n      width: \"50%\"\n    }}>\n      <div className=\"img-container\" style={{ objectFit: \"cover\" }}>\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default Character;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport Score from './components/Score'\nimport Character from './components/characterCard/Character'\nimport character from './character.json'\n\nclass App extends React.Component {\n  state = {\n    score: 0,\n    characterList: character,\n    highScore: 0\n  }\n\n  // create method to re-order the array on card click:\n  handleClick = (characterID) => {\n\n    // make a copy\n    const characterListCopy = [...this.state.characterList];\n    console.log(characterListCopy)\n    // create a logical flag\n    let isCorrect = false;\n\n    // iterate through characterListCopy\n    characterListCopy.forEach(character => {\n      if (character.id === characterID) {\n        if (!character.isClicked) {\n          isCorrect = true;\n          character.isClicked = true;\n        }\n      }\n    })\n\n    // if isCorrect is true, run logic for increasing point\n    if (isCorrect) {\n\n\n      const score = this.state.score + 1;\n      // increase count by one, check if top score should be updated, and shuffle cards\n      this.setState({\n        score: score,\n        highScore: (score >= this.state.highScore) ? (score) : (this.state.highScore),\n        characterList: characterListCopy.sort(() => .5 - Math.random())\n      })\n    }\n    else if (this.state.highScore === 9) {\n      this.setState({\n        score: 0,\n        characterList: characterListCopy.sort(() => 0.5 - Math.random())\n      })\n    }\n    else {\n      // reset characters\n      characterListCopy.forEach(character => {\n        character.isClicked = false;\n      })\n      this.setState({\n        score: 0,\n        characterList: characterListCopy.sort(() => 0.5 - Math.random())\n      })\n    }\n    console.log(this.state.score, this.state.highScore)\n\n  }\n\n\n\n  render() {\n    const { characterList } = this.state\n    return (\n      <div>\n        < Header />\n        < Score score={this.state.score} highScore={this.state.highScore} />\n        <div className=\"row justify-content-around\">\n          {\n            characterList.map(({ id, image }) => {\n              return (\n\n                < Character\n                  id={id}\n                  key={id}\n                  image={image}\n                  handleClick={this.handleClick} />\n              )\n            })\n          }\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}